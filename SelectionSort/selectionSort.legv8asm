// Author: Jaydon Cobb (jcobb)

Main:
    ADDI X0, X0, #0
    ADDI X1, X1, #10
    ADDI X19, X1, #0 
    BL Fill 
    BL Selection_sort

    SUBI SP, SP, #32
    STUR X30, [SP, #24]
    STUR X1, [SP, #16]
    STUR X0, [SP, #8]

    ADDI X3, XZR, #0      
    ADDI X2, XZR, #0     
    SUBI X1, X19, #1      
    BL Binary_search
    PRNT X0

    ADDI X3, XZR, #9     
    ADDI X2, XZR, #0     
    SUBI X1, X19, #1   
    BL Binary_search
    PRNT X0

    ADDI X3, XZR, #4    
    ADDI X2, XZR, #0      
    SUBI X1, X19, #1     
    BL Binary_search
    PRNT X0

    ADDI X3, XZR, #11     
    ADDI X2, XZR, #0      
    SUBI X1, X19, #1    
    BL Binary_search
    PRNT X0

    LDUR X30, [SP, #24]
    LDUR X1, [SP, #16]
    LDUR X0, [SP, #8]

    B End

Fill:
    SUBI SP, SP, #16
    STUR X0, [SP, #0]
    STUR X1, [SP, #8]
    ADDI X2, XZR, #0 

Fill_loop:
    SUBS XZR, X2, X1 
    B.GE Fill_end
    SUB X3, X1, X2
    SUBI X3, X3, #1
    LSL X4, X2, #3 
    ADD X4, X0, X4
    STUR X3, [X4, #0] 
    ADDI X2, X2, #1 
    B Fill_loop

Fill_end: 
    LDUR X0, [SP, #0]
    LDUR X1, [SP, #8]
    ADDI SP, SP, #16
    B RET

Swap:
    LDUR X11, [X0, #0]
    LDUR X10, [X1, #0]
    STUR X11, [X1, #0]
    STUR X10, [X0, #0]
    B RET

Find_min_idx:
    LDUR X10, [X0, #0]
    ADD X11, XZR, XZR
    ADD X12, XZR, XZR
    ADDI X9, XZR, #1

Find_min_idx_loop:
    ADD X12, X12, X9
    SUBS XZR, X12, X1
    B.GE Find_min_idx_end
    ADDI X0, X0, #8
    LDUR X13, [X0, #0]
    SUBS XZR, X13, X10
    B.GE Find_min_idx_loop
    ADD X10, X13, XZR
    ADD X11, X12, XZR
    B Find_min_idx_loop

Find_min_idx_end:
    ADD X0, X11, XZR
    B RET

Selection_sort:
    ORR X9, XZR, XZR

Selection_sort_loop:
    SUBS XZR, X9, X1
    ADDI X15, XZR, #1
    B.GE RET
    SUBI SP, SP, #32
    STUR X30, [SP, #24]
    STUR X9, [SP, #16]
    STUR X1, [SP, #8]
    STUR X0, [SP, #0]
    ORR X10, XZR, X9
    SUB X1, X1, X9
    LSL X10, X10, #3
    ADD X0, X0, X10
    BL Find_min_idx
    ORRI X11, X0, #0
    LDUR X30, [SP, #24]
    LDUR X9, [SP, #16]
    LDUR X1, [SP, #8]
    LDUR X0, [SP, #0]
    LSL X10, X9, #3
    ADD X0, X0, X10
    LSL X11, X11, #3
    ADD X1, X0, X11
    BL Swap
    LDUR X30, [SP, #24]
    LDUR X9, [SP, #16]
    LDUR X1, [SP, #8]
    LDUR X0, [SP, #0]
    ADDI SP, SP, #32
    ADD X9, X9, X15
    B Selection_sort_loop

Binary_search:
    SUBS X8, X1, X2 
    B.LT Return_minus_one
    ADD X8, X1, X2
    LSR X8, X8, #1 
    LSL X10, X8, #3 
    ADD X10, X0, X10
    LDUR X10, [X10, #0] 

    SUBS X12, X10, X3 
    B.GT Recurse_less
    B.LT Recurse_greater

    ORR X0, XZR, X8
    B RET

Recurse_less:
    SUBI X8, X8, #1 
    B Recurse

Recurse_greater:
    ADDI X8, X8, #1 

Recurse:
    SUBI SP, SP, #32
    STUR X30, [SP, #24]
    STUR X0, [SP, #16]
    STUR X1, [SP, #8]
    STUR X2, [SP, #0]
    ORR X1, XZR, X2
    ORR X2, XZR, X8
    BL Binary_search
    LDUR X30, [SP, #24]
    LDUR X0, [SP, #16]
    LDUR X1, [SP, #8]
    LDUR X2, [SP, #0]
    ADDI SP, SP, #32
    B RET

Return_minus_one:
    ADDI X0, XZR, #-1
    B RET


RET:
    BR LR

End:
    // DUMP
    HALT